{"version":3,"sources":["dbhelper.js","main.js","restaurant_info.js"],"names":["DBHelper","callback","DB_URL","DATABASE_URL","fetch","then","response","status","console","log","error","json","data","restaurants","catch","err","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","name","marker","L","latlng","lat","lng","title","alt","url","urlForRestaurant","addTo","newMap","port","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","value","append","fillCuisinesHTML","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","remove","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","imageAltTextForRestaurant","address","more","ariaLabelForButton","ariaLabelForRestaurantButton","href","setAttribute","mapMarkerForRestaurant","on","onClick","window","location","options","push","fetchRestaurantFromURL","fillBreadcrumb","getParameterByName","fetchRestaurantById","fillRestaurantHTML","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","day","appendChild","time","reviews","container","noReviews","createReviewHTML","review","date","rating","comments","breadcrumb","replace","regex","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"all.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${ port }/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n      // Grab the DB URL\r\n      let DB_URL = DBHelper.DATABASE_URL;\r\n     \r\n     // Make the fetch request\r\n     fetch(DB_URL) \r\n      .then(\r\n        function(response) {\r\n          if (response.status !== 200) {\r\n            console.log('Looks like there was a problem. Status Code: ' + response.status);  //if we failed let us know\r\n            return;\r\n            callback(error, null);\r\n          }\r\n\r\n        // Examine the text in the response\r\n        response.json().then(function(data) { // otherwise lets settle up with this data\r\n          const restaurants = data;\r\n          console.log(restaurants);\r\n          callback(null, restaurants);\r\n        });\r\n      }\r\n    )\r\n    .catch(function(err) {\r\n      console.log('Fetch Error :-S', err);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant alternate image URL.\r\n   */\r\n  static imageAltTextForRestaurant(restaurant) {\r\n    return (`${restaurant.name}`)\r\n  }\r\n  /**\r\n   *  Restaurant aria-label for buttons\r\n   */\r\n   static ariaLabelForRestaurantButton(restaurant) {\r\n    return (`View Details of ${restaurant.name} restaurant`)\r\n   }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n","let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 12,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1Ijoic3RyYW5nZW5lY3RhciIsImEiOiJjamlvcTdsdzcwMWVtM3ZycWd6NGFrbmowIn0.GyI5P23LCVPGHTI7oRpd4A',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = DBHelper.imageAltTextForRestaurant(restaurant);\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  let ariaLabelForButton = DBHelper.ariaLabelForRestaurantButton(restaurant);\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', ariaLabelForButton);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */\r\n\r\n","let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {  \n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\ninitMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1Ijoic3RyYW5nZW5lY3RhciIsImEiOiJjamlvcTdsdzcwMWVtM3ZycWd6NGFrbmowIn0.GyI5P23LCVPGHTI7oRpd4A',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}  \n \n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = DBHelper.imageAltTextForRestaurant(restaurant);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}